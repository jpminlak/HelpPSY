
○ 스프링 부트(내장형 톰켓)

-기억 되짚기
1. 파라미터를 넘기는 get 방식은 주로 조회의 의미를 가진다.
2. 파라미터를 넘기는 post 방식은 주로 저장할 목적을 가진다. 

- 장점
1. 보안 공격을 잘 막아주는 튼튼한 프레임워크이다.
2. SQl 인젝션, XSS, CSRF, 클릭젝킹 등의 보안 공격을 잘 막아준다. (개발자가 직접 막는 코드를 짤 수고가 없다는 의미)

- lombok 라이브러리
생성자와 getter와 setter를 자동으로 만들어준다. (단, 생성자의 경우 final 키워드가 붙은 필드만 매개변수에 지정해준다.)

- 스프링 부트 구조

▶src/main/java 디렉터리 안에 con.프로젝트명.ArtifactID로 이루어진 패키지 폴더:
컨트롤러, DTO, DB 처리를 위한 Entity, 서비스등의 자바 파일이 위치한다.

▶프로젝트명+Application.java 파일:
스프링부트 애플리케이션 프로그램의 시작을 담당하는 역할을 한다.
@SpringBootApplication이 붙는다.

▶src/main/resources 디렉터리:
자바 파일을 제외한 HTML, CSS, JS, 바이너리 파일(이미지, 동영상 등의 파일)등을 저장한다.
위 경로에서 static 파일 안에는 정적 파일 즉, 파일에 서비스 처리 등을 하지 않고 원본 그대로 사용하는 파일들을 저장한다.
위 경로에서 template 파일 안에는 서버에서 처리한 데이터로 화면을 구성하는 파일을 저장한다.

▶src/test/java 디렉터리:
JUnit으로 스프링 부트의 테스트 도구를 이용하여 서버를 실행하지 않고도, 작성한 코드를 바로 테스트 할 수 있으며, 
그런 코드들을 저장한다.

▶build.gradle 파일:
프로젝트에 필요한 플러그인과 라이브러리를 관리하는 곳이다.
※ Gradle은 Ant와 Maven의 단점을 보완하고, 장점을 잘 살려서 만들어진 빌드 도구이다.
※ Gradle을 작성하는 문법중 groovy가 있는데, 문법이 간결하고 가독성이 좋다.

▶application.properties 파일:
프로젝트의 환경 변수와 데이터베이스 등의 설정 파일을 저장하며, 프로젝트의 환경을 설정한다.

- DB 작업
▶ORM(Object-Relational Mapping) : 객체지향 프로그래밍에서 객체와 관계형 데이터베이스를 연결해주는 것으로, 
SQL 쿼리문을 개발자가 직접 작성하지 않고, 객체지향 언어의 코드로 작성하면 자동으로 만들어주는 기술이다.
Entity : 데이터베이스의 테이블과 매핑될 자바 클래스이다. (Entity로 정의한 속성들로 테이블이 만들어진다.)
ORM의 장점 : 
DBMS의 종류에 상관없이 일관된 자바 코드를 사용할 수 있어서. 덕분에 유연하고 유지보수성이 좋다.
-> 안정적인 SQL 쿼리문, 개발자가 달라져도 통일된 쿼리문, 요류 발생률 ↓
▶JPA : ORM 기술의 표준(인터페이스의 집합)
'하이버네이트' 라는 클래스가 JPA 인터페이스를 구현받는다.

-애너테이션들
▶@id :
id 속성을 의미하며 기본키로 지정해준다.
▶@GeneratedValue :
데이터를 저장할 때 해당 속성의 값을 자동으로 1 씩 증가시켜서 저장한다. (DB의 시퀀스 처럼)
위의 어노테이션 괄호 안에 있는 stratefy = GenerationType.IDENTITY 는 고유한 번호를 생성하는 설정이다.
▶Column Definition은 값의 성격을 지정할 수 있는데, "TEXT" 로 지정하면, 글자수를 제한하지 않고 텍스트를 지정할 수 있다.
※앤티티의 속성은 @Column 등의 애너테이션 없이도, 테이블의 열로 인식되는데, 그래서 그냥 클래스의 필드 변수로 지정하기
위해서는 @transient 애너테이션을 사용하면 클래스의 필드 변수로만 사용할 수 있다.

-JPA 인터페이스를 상속받아서 구현하는 리포지토리 인터페이스
extends JpaRepository<Entity 클래스의 이름, Entity 클래스의 기본키 타입>


